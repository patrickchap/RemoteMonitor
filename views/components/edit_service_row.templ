package component

import (
	viewmodels "RemoteMonitor/views/viewModels"
	"fmt"
	"strconv"
)

func EvaluateSelectedInput(selected string, value string) bool {
	return selected == value
}

func GetUnitName(schedualUnit string) string {
	unitMap := map[string]string{
		"s":   "second",
		"m":   "minute",
		"mon": "month",
	}

	unit, exists := unitMap[schedualUnit]
	if !exists {
		return ""
	}

	return unit
}

func GetUnitValue(schedualUnit string) int {
	unitMap := map[string]int{
		"s":   1,
		"m":   60,
		"mon": 12,
	}

	unit, exists := unitMap[schedualUnit]
	if !exists {
		return 0
	}

	return unit
}

var SchedualUnits = []string{"s", "m", "mon"}

//{ fmt.Sprintf("/admin/hostservice/edit/row/%d", service.Id) }
templ EditServiceRow(service viewmodels.HostServiceEdit) {
	<tr class="odd:bg-white odd:dark:bg-background-dark even:bg-gray-50 even:dark:bg-surface-dark border-b dark:border-gray-700 editing" hx-trigger="cancel" hx-get={ fmt.Sprintf("/admin/hostservice/edit/row/%d", service.Id) }>
		<th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
			{ service.ServiceName }
		</th>
		<td class="px-6 py-4 flex">
			<select
				id="schedule_unit_select"
				name="schedule_unit"
				class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 flex-.9"
				onchange="updateScheduleNumberOptions()"
			>
				for _, unit := range SchedualUnits {
					if EvaluateSelectedInput(unit, service.ScheduleUnit) {
						<option value={ unit } selected>{ GetUnitName(unit) }</option>
					} else {
						<option value={ unit }>{  GetUnitName(unit) }</option>
					}
				}
			</select>
			<select
				id="schedule_number_select"
				name="schedule_number"
				class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 flex-.9"
			>
				for i := 1; i < GetUnitValue(service.ScheduleUnit); i++ {
					<option value={ strconv.Itoa(i) }>{  strconv.Itoa(i) }</option>
				}
			</select>
		</td>
		<td class="px-6 py-4"></td>
		<td class="px-6 py-4">
			<button class="btn danger px-2" hx-get={ fmt.Sprintf("/admin/hostservice/edit/row/%d", service.Id) }>
				Cancel
			</button>
			<button class="btn danger px-2" hx-put={ fmt.Sprintf("/admin/hostservice/edit/row/%d", service.Id) } hx-include="closest tr">
				Save
			</button>
		</td>
	</tr>
	<script>
		function updateScheduleNumberOptions() {
			const unitSelect = document.getElementById('schedule_unit_select');
			const numberSelect = document.getElementById('schedule_number_select');
			const selectedUnit = unitSelect.value;
			console.log(selectedUnit);
			console.log(numberSelect);

			if(selectedUnit == 'mon') {
				numberSelect.innerHTML = '';
				for(let i = 1; i <= 12; i++) {
					const option = document.createElement('option');
					option.value = i;
					option.text = i;
					numberSelect.appendChild(option);
				}
			} else if(selectedUnit == 'm') {
				numberSelect.innerHTML = '';
				for(let i = 1; i < 60; i++) {
					const option = document.createElement('option');
					option.value = i;
					option.text = i;
					numberSelect.appendChild(option);
				}
			} else if (selectedUnit == 's') {
				numberSelect.innerHTML = '';
				for(let i = 1; i < 60; i++) {
					const option = document.createElement('option');
					option.value = i;
					option.text = i;
					numberSelect.appendChild(option);
				}
			}
		}

		updateScheduleNumberOptions();
	</script>
}

templ ServiceRow(service viewmodels.HostServiceEdit) {
	<tr id="abc" class="odd:bg-white odd:dark:bg-background-dark even:bg-gray-50 even:dark:bg-surface-dark border-b dark:border-gray-700">
		<th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
			{ service.ServiceName }
		</th>
		<td class="px-6 py-4">{ service.FormatedSchedual }</td>
		<td class="px-6 py-4">
			<a
				class="cursor-pointer"
				hx-trigger="delete"
				hx-delete={ fmt.Sprintf("/admin/hostservice/delete/%d", service.Id) }
				hx-target="#hostservices"
				hx-swap="outerHTML"
				onClick="
					let hostservices = document.querySelector('#hostservices');
					  console.log(hostservices);
					  Swal.fire({
					    title: 'Are you sure?',
					    icon: 'warning',
					    showCancelButton: true,
					    confirmButtonColor: '#3085d6',
					    cancelButtonColor: '#d33',
					    confirmButtonText: 'Yes, delete it!'
					  }).then((result) => {
					    if (result.isConfirmed) {
					      htmx.trigger(this, 'delete')

					    }
					  });
			"
			>
				<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trash-2"><path d="M3 6h18"></path><path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path><path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path><line x1="10" x2="10" y1="11" y2="17"></line><line x1="14" x2="14" y1="11" y2="17"></line></svg>
			</a>
		</td>
		<td class="px-6 py-4">
			<button
				class="btn danger"
				hx-get={ fmt.Sprintf("/admin/hostservice/edit/%d", service.Id) }
				hx-trigger="edit"
				onClick="let editing = document.querySelector('.editing')
                         if(editing) {
                           Swal.fire({title: 'Already Editing',
                                      showCancelButton: true,
                                      confirmButtonText: 'Yep, Edit This Row!',
                                      text:'Hey!  You are already editing a row!  Do you want to cancel that edit and continue?'})
                           .then((result) => {
                                if(result.isConfirmed) {
                                   htmx.trigger(editing, 'cancel')
                                   htmx.trigger(this, 'edit')
                                }
                            })
                         } else {
                            htmx.trigger(this, 'edit')
                         }"
			>
				Edit
			</button>
		</td>
	</tr>
}
